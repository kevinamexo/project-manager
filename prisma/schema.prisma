datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]

}

 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         TeamMember[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Task{
    id String @id @default(uuid())
    name String
    description String?
    status String @default("todo")
    project  Project @relation(fields: [projectId], references:[id])
    projectId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
 

model Project{
    id  String @id @default(cuid())
    name String
    status  String
    description String?
    tasks Task[]
    team Team[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}


model Team{
  id String @id @default(cuid())
  name String 
  members TeamMember[]
  projects Project[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model TeamMember{
  id String @id @default(cuid())
  role String
  teamId String
  userId String
  team   Team @relation(fields: [teamId], references: [id])
  user   User @relation(fields: [userId], references: [id])
  @@unique([userId, teamId])

}


// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}